{"version":3,"sources":["./src/app/views/dashboard/dashboard.component.scss","./src/app/views/dashboard/dashboard.module.ts","./src/app/views/dashboard/dashboard.component.html","./node_modules/ngx-bootstrap/buttons/fesm2015/ngx-bootstrap-buttons.js","./src/app/views/dashboard/dashboard-routing.module.ts","./src/app/views/dashboard/dashboard.component.ts"],"names":["CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","ButtonCheckboxDirective","multi","btnCheckboxTrue","btnCheckboxFalse","state","onChange","Function","prototype","onTouched","isDisabled","toggle","value","trueValue","falseValue","fn","decorators","type","Directive","args","selector","providers","propDecorators","Input","HostBinding","onClick","HostListener","RADIO_CONTROL_VALUE_ACCESSOR","ButtonRadioDirective","el","cdr","group","renderer","_value","_disabled","disabled","setDisabledState","btnRadio","nativeElement","attributes","uncheckable","undefined","_onChange","markForCheck","setAttribute","removeAttribute","ctorParameters","ElementRef","ChangeDetectorRef","ButtonRadioGroupDirective","Optional","Renderer2","isActive","RADIO_CONTROL_VALUE_ACCESSOR$1","radioButtons","forEach","buttons","ContentChildren","ButtonsModule","ngModule","NgModule","declarations","exports"],"mappings":"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","file":"views-dashboard-dashboard-module.js","sourcesContent":["export default \"img {\\n  padding: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXC4uXFxkYXNoYm9hcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0FBQ0oiLCJmaWxlIjoiZGFzaGJvYXJkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW1nIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbn0iXX0= */\";","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ChartsModule } from 'ng2-charts';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\r\n\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { SharedModule } from '../../../shared/shared.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    SharedModule,\r\n    DashboardRoutingModule,\r\n    ChartsModule,\r\n    BsDropdownModule,\r\n    ButtonsModule.forRoot()\r\n  ],\r\n  declarations: [ DashboardComponent ]\r\n})\r\nexport class DashboardModule { }\r\n","export default \"<div class=\\\"row\\\">\\r\\n  <app-embedded-report class=\\\"col-12\\\" [reportId]=\\\"3\\\"></app-embedded-report>\\r\\n</div>\\r\\n<!-- <div class=\\\"row\\\">\\r\\n  <div class=\\\"col-6\\\">\\r\\n    <app-embedded-report class=\\\"col-12\\\" [reportId]=\\\"2\\\"></app-embedded-report>\\r\\n  </div>\\r\\n  <div class=\\\"col-6\\\">\\r\\n    <app-embedded-report class=\\\"col-12\\\" [reportId]=\\\"1\\\"></app-embedded-report>\\r\\n  </div>\\r\\n</div> -->\";","import { forwardRef, Directive, Input, HostBinding, HostListener, ElementRef, ChangeDetectorRef, Optional, Renderer2, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: config: activeClass - Class to apply to the checked buttons\n/** @type {?} */\nconst CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => ButtonCheckboxDirective)),\n    multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\nclass ButtonCheckboxDirective {\n    constructor() {\n        /**\n         * Truthy value, will be set to ngModel\n         */\n        this.btnCheckboxTrue = true;\n        /**\n         * Falsy value, will be set to ngModel\n         */\n        this.btnCheckboxFalse = false;\n        this.state = false;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    // view -> model\n    /**\n     * @return {?}\n     */\n    onClick() {\n        if (this.isDisabled) {\n            return;\n        }\n        this.toggle(!this.state);\n        this.onChange(this.value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.toggle(this.trueValue === this.value);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    get trueValue() {\n        return typeof this.btnCheckboxTrue !== 'undefined'\n            ? this.btnCheckboxTrue\n            : true;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    get falseValue() {\n        return typeof this.btnCheckboxFalse !== 'undefined'\n            ? this.btnCheckboxFalse\n            : false;\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    toggle(state) {\n        this.state = state;\n        this.value = this.state ? this.trueValue : this.falseValue;\n    }\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.state = this.trueValue === value;\n        this.value = value ? this.trueValue : this.falseValue;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n}\nButtonCheckboxDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[btnCheckbox]',\n                providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\n            },] }\n];\nButtonCheckboxDirective.propDecorators = {\n    btnCheckboxTrue: [{ type: Input }],\n    btnCheckboxFalse: [{ type: Input }],\n    state: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /**\n     * Truthy value, will be set to ngModel\n     * @type {?}\n     */\n    ButtonCheckboxDirective.prototype.btnCheckboxTrue;\n    /**\n     * Falsy value, will be set to ngModel\n     * @type {?}\n     */\n    ButtonCheckboxDirective.prototype.btnCheckboxFalse;\n    /** @type {?} */\n    ButtonCheckboxDirective.prototype.state;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.isDisabled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.onChange;\n    /**\n     * @type {?}\n     * @protected\n     */\n    ButtonCheckboxDirective.prototype.onTouched;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => ButtonRadioDirective)),\n    multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nclass ButtonRadioDirective {\n    /**\n     * @param {?} el\n     * @param {?} cdr\n     * @param {?} group\n     * @param {?} renderer\n     */\n    constructor(el, cdr, group, renderer) {\n        this.el = el;\n        this.cdr = cdr;\n        this.group = group;\n        this.renderer = renderer;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    /**\n     * Current value of radio component or group\n     * @return {?}\n     */\n    get value() {\n        return this.group ? this.group.value : this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this.group) {\n            this.group.value = value;\n            return;\n        }\n        this._value = value;\n    }\n    /**\n     * If `true` — radio button is disabled\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    set disabled(disabled) {\n        this._disabled = disabled;\n        this.setDisabledState(disabled);\n    }\n    /**\n     * @return {?}\n     */\n    get isActive() {\n        return this.btnRadio === this.value;\n    }\n    /**\n     * @return {?}\n     */\n    onClick() {\n        if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n            return;\n        }\n        this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n        this._onChange(this.value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.uncheckable = typeof this.uncheckable !== 'undefined';\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this.onTouched();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    _onChange(value) {\n        if (this.group) {\n            this.group.onTouched();\n            this.group.onChange(value);\n            return;\n        }\n        this.onTouched();\n        this.onChange(value);\n    }\n    // ControlValueAccessor\n    // model -> view\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    setDisabledState(disabled) {\n        if (disabled) {\n            this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n            return;\n        }\n        this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n    }\n}\nButtonRadioDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[btnRadio]',\n                providers: [RADIO_CONTROL_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nButtonRadioDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ButtonRadioGroupDirective, decorators: [{ type: Optional }] },\n    { type: Renderer2 }\n];\nButtonRadioDirective.propDecorators = {\n    btnRadio: [{ type: Input }],\n    uncheckable: [{ type: Input }],\n    value: [{ type: Input }],\n    disabled: [{ type: Input }],\n    isActive: [{ type: HostBinding, args: ['class.active',] }, { type: HostBinding, args: ['attr.aria-pressed',] }],\n    onClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /** @type {?} */\n    ButtonRadioDirective.prototype.onChange;\n    /** @type {?} */\n    ButtonRadioDirective.prototype.onTouched;\n    /**\n     * Radio button value, will be set to `ngModel`\n     * @type {?}\n     */\n    ButtonRadioDirective.prototype.btnRadio;\n    /**\n     * If `true` — radio button can be unchecked\n     * @type {?}\n     */\n    ButtonRadioDirective.prototype.uncheckable;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.el;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.cdr;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.group;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioDirective.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n    provide: NG_VALUE_ACCESSOR,\n    /* tslint:disable-next-line: no-use-before-declare */\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => ButtonRadioGroupDirective)),\n    multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nclass ButtonRadioGroupDirective {\n    /**\n     * @param {?} cdr\n     */\n    constructor(cdr) {\n        this.cdr = cdr;\n        this.onChange = Function.prototype;\n        this.onTouched = Function.prototype;\n    }\n    /**\n     * @return {?}\n     */\n    get value() {\n        return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this._value = value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._value = value;\n        this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n    setDisabledState(disabled) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((/**\n             * @param {?} buttons\n             * @return {?}\n             */\n            buttons => {\n                buttons.setDisabledState(disabled);\n            }));\n        }\n    }\n}\nButtonRadioGroupDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[btnRadioGroup]',\n                providers: [RADIO_CONTROL_VALUE_ACCESSOR$1]\n            },] }\n];\n/** @nocollapse */\nButtonRadioGroupDirective.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nButtonRadioGroupDirective.propDecorators = {\n    radioButtons: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => ButtonRadioDirective)),] }]\n};\nif (false) {\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.onChange;\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.onTouched;\n    /** @type {?} */\n    ButtonRadioGroupDirective.prototype.radioButtons;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioGroupDirective.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    ButtonRadioGroupDirective.prototype.cdr;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ButtonsModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return { ngModule: ButtonsModule, providers: [] };\n    }\n}\nButtonsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n                exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective, ButtonsModule, CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa, RADIO_CONTROL_VALUE_ACCESSOR$1 as ɵb, RADIO_CONTROL_VALUE_ACCESSOR as ɵc };\n//# sourceMappingURL=ngx-bootstrap-buttons.js.map\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DashboardComponent,\r\n    data: {\r\n      title: 'Dashboard'\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  DCBT : Number;\r\n  DCBH : Number;\r\n  VRT : Number;\r\n  EVC : Number;\r\n  AEIS : Number;\r\n  AMTC : Number;\r\n  TVHW : Number;\r\n  TVTS : Number;\r\n \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.LoadValues();\r\n  }\r\n\r\n  LoadValues(){\r\n    this.DCBT = 120;\r\n    this.DCBH = 100;\r\n    this.VRT = 90;\r\n    this.EVC = 65;\r\n    this.AEIS = 23;\r\n    this.AMTC = 45;\r\n    this.TVHW = 90;\r\n    this.TVTS = 29;\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}